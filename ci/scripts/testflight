#!/bin/bash
#
# ci/scripts/create-release-and-deploy
#
# Script for generating Github release / tag assets
# and managing release notes for a BOSH Release pipeline
#
# author:  James Hunt <james@niftylogic.com>
# created: 2016-03-30

header() {
	echo
	echo "###############################################"
	echo
	echo $*
	echo
}

header "Setting up ~/.bosh_config..."
cat > ~/.bosh_config << EOF
---
aliases:
  target:
    bosh-lite: ${BOSH_LITE_TARGET}
auth:
  ${BOSH_LITE_TARGET}:
    username: ${BOSH_LITE_USERNAME}
    password: ${BOSH_LITE_PASSWORD}
EOF

set -e
cd ${REPO_ROOT}
header "Pulling in any git submodules..."
git submodule update --init --recursive --force

header "Cleaning up from any previous deployments..."
bosh target ${BOSH_LITE_TARGET}
bosh -n delete deployment ${BOSH_LITE_DEPLOYMENT} --force || echo "continuing on..."

header "Creating candidate BOSH release..."
bosh -n create release
bosh -n upload release --rebase || echo "Continuing..."

header "Deploying to BOSH-lite with vault.backend.use_file..."
./templates/make_manifest warden
bosh -n deploy

header "Initialize and unseal vault"
export VAULT_ADDR=http://10.58.111.44:8200
seals_token=$(vault init)
echo $seals_token

export VAULT_TOKEN=$(echo $seals_token | grep 'Initial Root Token' | awk '{print $4}')

cat > token.yml <<EOF
---
meta:
  token: "${VAULT_TOKEN}"
EOF
cat token.yml

./templates/make_manifest warden token.yml
bosh -n deploy

set -x
vault unseal $(echo $seals_token | grep 'Unseal Key 1' | awk '{print $4}')
vault unseal $(echo $seals_token | grep 'Unseal Key 2' | awk '{print $4}')
vault unseal $(echo $seals_token | grep 'Unseal Key 3' | awk '{print $4}')
set +x

header "Pre 'sanity-test' errand sanity test"
test_value=knock-$(date +"%s" | rev)
vault write secret/handshake sanity-test=${test_value}
read_value=$(vault read secret/handshake | grep sanity-test | awk '{print $2}')
if [[ "${read_value}" != "${test_value}" ]]; then
  echo "ERROR: vault did not return same value written"
  exit 1
fi

vault delete secret/handshake

header "Sanity tests"
bosh -n run errand sanity-test

header "Cleaning up..."
bosh -n delete deployment ${BOSH_LITE_DEPLOYMENT} --force || echo "continuing on..."
bosh -n cleanup || echo "continuing on..."

echo
echo "SUCCESS"
exit 0
